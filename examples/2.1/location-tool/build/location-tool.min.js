(function (global){
var ym = { modules: global.ymaps.modules };

(function (modules){
var project = { DEBUG: false };
if (typeof modules == 'undefined' && typeof require == 'function') {
    var modules = require('ym');
}

modules.define('util.providePackage', ['system.mergeImports'], function (provide, mergeImports) {
    provide(function (srcPackage, packageArgs) {
        var packageProvide = packageArgs[0],
            packageModules = Array.prototype.slice.call(packageArgs, 1),
            ns = mergeImports.joinImports(srcPackage.name, {}, srcPackage.deps, packageModules);

        packageProvide(ns);
    });
});
})(ym.modules);

ym.modules.define('LocationTool.component.CrossControl', [
    'util.defineClass',
    'templateLayoutFactory',
    'collection.Item',
    'data.Manager',
    'option.Manager',
    'event.Manager'
], function (provide, defineClass, templateLayoutFactory, CollectionItem, DataManager, OptionManager, EventManager) {
    /**
     * Класс контрола "центр карты".
     * @class
     * @name CrossControl
     */
    var CrossControl = defineClass(function (params) {
        params = params || {};
        this.events = new EventManager();
        this.options = new OptionManager(params.options);
    }, CollectionItem, /** @lends CrossControl.prototype */{
        /**
         * Устанавливает родительский объект.
         * @function
         * @name CrossControl.setParent
         * @param {IControlParent} parent Родительский объект.
         * @returns {CrossControl} Возвращает ссылку на себя.
         */
        setParent: function (parent) {
            this.parent = parent;

            if(parent) {
                var map = this._map = parent.getMap();
                this._setPosition(map.container.getSize());
                this._setupListeners();
                /**
                 * Передаем в макет контрола данные о его опциях.
                 * @see http://api.yandex.ru/maps/doc/jsapi/2.x/ref/reference/ILayout.xml#constructor-summary
                 */
                this.layout = new CrossControlLayout({ options: this.options });
                /**
                 * Контрол будет добавляться в pane событий, чтобы исключить интерактивность.
                 * @see http://api.yandex.ru/maps/doc/jsapi/2.x/ref/reference/ILayout.xml#setParentElement
                 */
                this.layout.setParentElement(map.panes.get('events').getElement());
            }
            else {
                this.layout.setParentElement(null);
                this._clearListeners();
            }

            return this;
        },
        /**
         * Возвращает ссылку на родительский объект.
         * @see http://api.yandex.ru/maps/doc/jsapi/2.x/ref/reference/IControl.xml#getParent
         * @function
         * @name CrossControl.getParent
         * @returns {IControlParent} Ссылка на родительский объект.
         */
        getParent: function () {
            return this.parent;
        },
        /**
         * Устанавливает контролу опцию "position".
         * @function
         * @private
         * @name CrossControl._setPosition
         * @param {Array} size Размер контейнера карты.
         */
        _setPosition: function (size) {
            // -8, так как картинка 16х16
            this.options.set('position', {
                top: size[1] / 2 - 8,
                right: size[0] / 2 - 8
            });
        },
        _onPositionChange: function (e) {
            this._setPosition(e.get('newSize'));
        },
        _setupListeners: function () {
            this._map.container.events
                .add('sizechange', this._onPositionChange, this);
        },
        _clearListeners: function () {
            if(this._map) {
                this._map.container.events
                    .remove('sizechange', this._onPositionChange, this);
            }
        }
    });

    /**
     * Макет контрола.
     * @see http://api.yandex.ru/maps/doc/jsapi/2.x/ref/reference/templateLayoutFactory.xml
     * @class
     * @name CrossControl.Layout
     */
    var CrossControlLayout = templateLayoutFactory.createClass(
        '<div class="cross-control" style="right:{{ options.position.right }}px; top:{{ options.position.top }}px;"></div>'
    );

    provide(CrossControl);
});

ym.modules.define('LocationTool.component.DomView', [
    'util.defineClass'
], function (provide, defineClass) {
    /**
     * Класс DOM-отображения Инструмента определения координат.
     * @class
     * @name DOMView
     */
    var DOMView = defineClass(function () {
        this._element = $('form');
    }, /** @lends DOMView.prototype */{
        /**
         * Отображаем изменений данных в DOM-структуре.
         * @function
         * @name DOMView.render
         * @param {Object} data Объект с полями "mapCenter", "mapZoom" и "markerPosition".
         */
        render: function (data) {
            $.each(data, $.proxy(this._setData, this));
        },
        /**
         * Очистка DOM-отображения.
         * @function
         * @private
         * @name DOMView.clear
         */
        clear: function () {
            this._element.remove();
        },
        /**
         * Форматируем координату до 6-ти точек после запятой.
         * @function
         * @private
         * @name DOMView._toFixedNumber
         * @param {Number|String} coords Широта или Долгота.
         * @returns {Number} Число фиксированной длины.
         */
        _toFixedNumber: function (coords) {
            return Number(coords).toFixed(8);
        },
        /**
         * Обновление значений полей формы.
         * @function
         * @private
         * @name DOMView._setData
         * @param {String} id Идентификатор поля.
         * @param {Number|String} value Новое значение поля.
         */
        _setData: function (id, value) {
            this._element
                .find('#' + id)
                .val(
                    $.isArray(value)?
                        $.map(value, this._toFixedNumber).join(', ') : value
                );
        }
    });

    provide(DOMView);
});

ymaps.modules.define('LocationTool.component.MapView', [
    'Placemark',
    'data.Manager',
    'util.defineClass',
    'util.bind'
], function (provide, Placemark, DataManager, defineClass, bind) {
    /**
     * Класс отображения на карте Инструмента определения координат.
     * @class
     * @name MapView
     * @param {ymaps.Map} map Карта.
     */
    var MapView = defineClass(function (map) {
        this._map = map;
        // Интервал обновления данных (millisec) при кинетическом движении карты.
        this._updateTimeout = 10;
        this._marker = this._createDraggableMarker();
        map.geoObjects.add(this._marker);
        this.state = new DataManager({
            mapCenter: map.getCenter(),
            mapZoom: map.getZoom(),
            markerPosition: map.getCenter()
        });
        this._setupListeners();
    }, /** @lends MapView.prototype */{
        /**
         * Навешиваем обработчики.
         * @function
         * @private
         * @name MapView._setupListeners
         */
        _setupListeners: function () {
            this._map.events
                .add('boundschange', this._onMapBoundsChange, this)
                .add('actiontick', this._onMapAction, this)
                /* Во время плавного движения карты, у браузеров поддерживающих CSS3 Transition,
                 * actiontick не кидается, поэтому используем этот прием через setInterval.
                 */
                .add('actionbegin', this._onMapActionBegin, this)
                .add('actionend', this._onMapActionEnd, this);

            this._marker.events
                .add('drag', this._onMarkerDrag, this);
        },
        /**
         * Снимаем обработчики.
         * @function
         * @private
         * @name MapView._detachListeners
         */
        _detachListeners: function () {
            this._marker.events
                .remove('drag', this._onMarkerDrag, this);

            this._map.events
                .remove('boundschange', this._onMapBoundsChange, this)
                .remove('actiontick', this._onMapAction, this)
                .remove('actionbegin', this._onMapActionBegin, this)
                .remove('actionend', this._onMapActionEnd, this);
        },
        /**
         * Обработчик перетаскивания метки.
         * @function
         * @private
         * @name MapView._onMarkerDrag
         * @param {ymaps.Event} e Объект-событие
         */
        _onMarkerDrag: function (e) {
            this.state.set({
                markerPosition: e.get('target').geometry.getCoordinates()
            });
        },
        /**
         * Обработчик начала плавного движения карты.
         * @see http://api.yandex.ru/maps/doc/jsapi/2.x/ref/reference/Map.xml#event-actionbegin
         * @function
         * @private
         * @name MapView._onMapActionBegin
         * @param {ymaps.Event} e Объект-событие
         */
        _onMapActionBegin: function (e) {
            if(this._intervalId) {
                return;
            }

            this._intervalId = window.setInterval(
                bind(this._onMapAction, this),
                this._updateTimeout
            );
        },
        /**
         * Обработчик окончания плавного движения карты.
         * @see http://api.yandex.ru/maps/doc/jsapi/2.x/ref/reference/Map.xml#event-actionend
         * @function
         * @private
         * @name MapView._onMapActionEnd
         * @param {ymaps.Event} e Объект-событие
         */
        _onMapActionEnd: function (e) {
            window.clearInterval(this._intervalId);
            this._intervalId = null;
        },
        /**
         * Обработчик исполнения нового шага плавного движения.
         * @see http://api.yandex.ru/maps/doc/jsapi/2.x/ref/reference/Map.xml#event-actiontick
         * @function
         * @private
         * @name MapView._onMapAction
         * @param {ymaps.Event} e Объект-событие
         */
        _onMapAction: function (e) {
            /**
             * Определяет состояние карты в момент ее плавного движения.
             * @see http://api.yandex.ru/maps/doc/jsapi/2.x/ref/reference/map.action.Manager.xml#getCurrentState
             */
            var state = this._map.action.getCurrentState(),
                zoom = state.zoom,
                /**
                 * Преобразует пиксельные координаты на указанном уровне масштабирования в координаты проекции (геокоординаты).
                 * @see http://api.yandex.ru/maps/doc/jsapi/2.x/ref/reference/IProjection.xml#fromGlobalPixels
                 */
                center = this._map.options.get('projection').fromGlobalPixels(
                    state.globalPixelCenter, zoom
                );

            this.state.set({
                mapCenter: center,
                mapZoom: zoom
            });
        },
        /**
         * Обработчик события изменения области просмотра карты (в результате изменения центра или уровня масштабирования)
         * @see http://api.yandex.ru/maps/doc/jsapi/2.x/ref/reference/Map.xml#event-boundschange
         * @function
         * @private
         * @name MapView._onMapBoundsChange
         * @param {ymaps.Event} e Объект-событие
         */
        _onMapBoundsChange: function (e) {
            this.state.set({
                mapCenter: e.get('newCenter'),
                mapZoom: e.get('newZoom')
            });
        },
        /**
         * Создание перетаскиваемого маркера.
         * @function
         * @private
         * @name MapView._createDraggableMarker
         */
        _createDraggableMarker: function () {
            return new Placemark(this._map.getCenter(), {
                hintContent: 'Перетащите метку'
            }, {
                draggable: true
            });
        }
    });

    provide(MapView);
});

ym.modules.define('LocationTool.component.RadioGroup', [
    'util.defineClass',
    'Collection',
    'data.Manager',
    'Monitor',
    'vow'
], function (provide, defineClass, Collection, DataManager, Monitor, vow) {
    /**
     * Класс радиогруппы для кнопок.
     * @class
     * @name RadioGroup
     */
    var RadioGroup = defineClass(function (options) {
        RadioGroup.superclass.constructor.call(this, options);
        this.state = new DataManager();
        this._el = document.createElement('div');
        this._setupListeners();
    }, Collection, /** @lends RadioGroup.prototype */{
        add: function (child) {
            child.options.setParent(this.options);
            child.events.setParent(this.events);
            child.setParent(this);

            return RadioGroup.superclass.add.call(this, child);
        },
        remove: function (child) {
            child.setParent(null);
            child.events.setParent(null);

            return RadioGroup.superclass.remove.call(this, child);
        },
        setParent: function (parent) {
            this._parent = parent;
            this.getParent().getChildElement(this).then(this._onElement, this);
        },
        getParent: function () {
            return this._parent;
        },
        getLayout: function () {
            console.log('get layout');
        },
        getChildElement: function (child) {
            console.log('in getChildElement', child);
            var el = document.createElement('div');
            this._el.appendChild(el);
            return vow.resolve(el);
        },
        onAddToMap: function (map) {
        debugger;
            RadioGroup.superclass.onAddToMap.call(this, map);
            this.getParent().getChildElement(this).then(this._onElement, this);
            console.log(this.getParent(), this.getParent() === this);
        },
        onRemoveFromMap: function (map) {
            RadioGroup.superclass.onRemoveFromMap.call(this, map);
        },
        _onElement: function (parentContainer) {
            this._el.id = 'test';
            parentContainer.appendChild(this._el);
        },
        _setupListeners: function () {
            this.events.add('select', this._onChildSelect, this);
        },
        _onChildSelect: function (e) {
            var child = e.get('target');

            this.each(function (it) {
                if(child !== it) {
                    child.deselect();
                }
            });
        }
    });

    provide(RadioGroup);
});

ym.modules.define('LocationTool', [
    'util.defineClass',
    'Monitor',
    'LocationTool.component.MapView',
    'LocationTool.component.DomView'
], function (provide, defineClass, Monitor, MapView, DOMView) {
    /**
     * Класс Инструмент определения координат.
     * @class
     * @name LocationTool
     * @param {ymaps.Map} map Карта.
     */
    var LocationTool = defineClass(function (map) {
        this._domView = new DOMView();
        this._mapView = new MapView(map);
        this._monitor = new Monitor(this._mapView.state);
        this._setupMonitor();
        this._initDOMView();
    }, /** @lends LocationTool.prototype */{
        /**
         * Инициализирует DOMView начальными значениями карты.
         * @private
         * @function
         * @name LocationTool._initView
         */
        _initDOMView: function () {
            this._domView.render(this._mapView.state.getAll());
        },
        /**
         * Настраиваем монитор для наблюдения за интересующими нас полями.
         * @see http://api.yandex.ru/maps/doc/jsapi/2.x/ref/reference/Monitor.xml
         * @private
         * @function
         * @name LocationTool._setupMonitor
         */
        _setupMonitor: function () {
            this._monitor
                .add(['mapCenter', 'mapZoom', 'markerPosition'], this._onMapViewStateChange, this);
        },
        /**
         * Останавливаем наблюдение.
         * @see http://api.yandex.ru/maps/doc/jsapi/2.x/ref/reference/Monitor.xml#removeAll
         * @private
         * @function
         * @name LocationTool._clearMonitor
         */
        _clearMonitor: function () {
            this._monitor
                .removeAll();
        },
        /**
         * Обработчик изменения полей.
         * @private
         * @function
         * @name LocationTool._onMapViewStateChange
         */
        _onMapViewStateChange: function (data) {
            this._domView.render(data);
        }
    });

    provide(LocationTool);
});

})(this);